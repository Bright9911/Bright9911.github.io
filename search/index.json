[{"content":"使用手机扫码登录系统 安装二维码生成库 1 composer require simplesoftwareio/simple-qrcode web.php 1 2 3 4 5 6 7 8 9 // 扫码 // 生成二维码 Route::get(\u0026#39;/login/qr\u0026#39;, [App\\Http\\Controllers\\Auth\\LoginController::class, \u0026#39;generateQrCode\u0026#39;]); // 扫码绑定 Route::get(\u0026#39;/auth/scan/{token}\u0026#39;, [App\\Http\\Controllers\\Auth\\ScanLoginController::class, \u0026#39;bindScanLogin\u0026#39;]); // 确认登录 Route::get(\u0026#39;/auth/confirm/{token}\u0026#39;, [App\\Http\\Controllers\\Auth\\LoginController::class, \u0026#39;confirmLogin\u0026#39;]); // 检查 Token 是否绑定成功 Route::get(\u0026#39;/auth/check/{token}\u0026#39;, [App\\Http\\Controllers\\Auth\\LoginController::class, \u0026#39;checkToken\u0026#39;]); Controllers/Auth/ScanLoginController.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;?php namespace App\\Http\\Controllers\\Auth; use App\\Http\\Controllers\\Controller; use Illuminate\\Support\\Facades\\Auth; use Illuminate\\Support\\Facades\\Cache; class ScanLoginController extends Controller { // 扫码绑定 public function bindScanLogin($token) { // 验证Token是否有效 $scanInfo = Cache::get(\u0026#39;scan_login_token_\u0026#39; . $token); if (!$scanInfo) { \\Log::error(\u0026#39;扫码绑定失败：Token无效或已过期，Token: \u0026#39; . $token); return \u0026#39;二维码已过期或无效\u0026#39;; } // 如果用户未登录，则提示用户登录 if (!Auth::check()) { \\Log::info(\u0026#39;扫码绑定：用户未登录，Token: \u0026#39; . $token); return redirect()-\u0026gt;guest(\u0026#39;/login\u0026#39;); } // 绑定扫码登录 Cache::put(\u0026#39;scan_login_token_\u0026#39; . $token, [ \u0026#39;user_id\u0026#39; =\u0026gt; Auth::user()-\u0026gt;id, \u0026#39;expired_at\u0026#39; =\u0026gt; $scanInfo[\u0026#39;expired_at\u0026#39;] ], $scanInfo[\u0026#39;expired_at\u0026#39;]); \\Log::info(\u0026#39;扫码绑定成功，Token: \u0026#39; . $token . \u0026#39;，User ID: \u0026#39; . Auth::user()-\u0026gt;id); return \u0026#39;扫码绑定成功，请在设备上确认登录\u0026#39;; } } 在Controllers/Auth/LoginController.php中加上 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 use SimpleSoftwareIO\\QrCode\\Facades\\QrCode; use Illuminate\\Support\\Str; // 生成二维码 public function generateQrCode() { $token = Str::random(32); $expiredAt = now()-\u0026gt;addMinutes(5); // 存储Token到缓存 \\Cache::put(\u0026#39;scan_login_token_\u0026#39; . $token, [ \u0026#39;expired_at\u0026#39; =\u0026gt; $expiredAt ], $expiredAt); // 记录 Token 到会话中 session([\u0026#39;scan_login_token\u0026#39; =\u0026gt; $token]); // 生成二维码（SVG 格式） $qrCode = QrCode::size(300)-\u0026gt;generate(url(\u0026#39;/auth/scan/\u0026#39; . $token)); // 添加正确的 Data URI 前缀 $qrcodeDataUri = \u0026#39;data:image/svg+xml;base64,\u0026#39; . base64_encode($qrCode); return view(\u0026#39;login.qr\u0026#39;, [\u0026#39;qrcode\u0026#39; =\u0026gt; $qrcodeDataUri]); } // 确认登录 public function confirmLogin($token) { // 验证Token是否有效 $scanInfo = \\Cache::get(\u0026#39;scan_login_token_\u0026#39; . $token); if (!$scanInfo || !isset($scanInfo[\u0026#39;user_id\u0026#39;])) { return redirect(\u0026#39;/login\u0026#39;)-\u0026gt;withErrors(\u0026#39;登录已过期或无效\u0026#39;); } // 登录用户 Auth::loginUsingId($scanInfo[\u0026#39;user_id\u0026#39;]); // 清除缓存 \\Cache::forget(\u0026#39;scan_login_token_\u0026#39; . $token); return redirect(\u0026#39;/home\u0026#39;); } // 检查Token public function checkToken($token) { $scanInfo = \\Cache::get(\u0026#39;scan_login_token_\u0026#39; . $token); if ($scanInfo \u0026amp;\u0026amp; isset($scanInfo[\u0026#39;user_id\u0026#39;])) { return response()-\u0026gt;json([\u0026#39;success\u0026#39; =\u0026gt; true]); } return response()-\u0026gt;json([\u0026#39;success\u0026#39; =\u0026gt; false]); } resources/views/login/qr.blade.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;扫码登录\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;text-align: center; margin-top: 50px;\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;扫码登录\u0026lt;/h2\u0026gt; \u0026lt;img src=\u0026#34;{{ $qrcode }}\u0026#34; alt=\u0026#34;扫码登录\u0026#34;\u0026gt; \u0026lt;p\u0026gt;请使用手机扫描二维码完成登录\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; // 每隔 5 秒检查一次 Token 是否绑定成功 setInterval(function() { var token = \u0026#34;{{ session(\u0026#39;scan_login_token\u0026#39;) }}\u0026#34;; fetch(\u0026#34;{{ url(\u0026#39;http://10.11.201.116:8000/auth/check\u0026#39;) }}/\u0026#34; + token) .then(response =\u0026gt; response.json()) .then(data =\u0026gt; { if (data.success) { window.location.href = \u0026#34;{{ url(\u0026#39;/auth/confirm\u0026#39;) }}/\u0026#34; + token; } }); }, 5000); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 在config/app.php中 1 2 3 4 5 6 7 8 9 \u0026#39;providers\u0026#39; =\u0026gt; [ // ... SimpleSoftwareIO\\QrCode\\QrCodeServiceProvider::class, ], \u0026#39;aliases\u0026#39; =\u0026gt; [ // ... \u0026#39;QrCode\u0026#39; =\u0026gt; SimpleSoftwareIO\\QrCode\\Facades\\QrCode::class, ], 在.env中 1 APP_URL=http://10.11.201.116:8000 启动项目 1 2 3 4 php artisan serve --host 0.0.0.0 --port 8000 // 在以下路径访问 http://10.11.201.116:8000/login/qr ","date":"2025-05-28T11:22:56+08:00","image":"https://Bright9911.github.io/p/laravel%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/4ab9d960e5111d286f6396a8edee2b46_hu_9460254082006378.jpg","permalink":"https://Bright9911.github.io/p/laravel%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95/","title":"【Laravel】扫码登录"},{"content":"1、安装验证码扩展包 首先需要安装mews/captcha验证码扩展包，执行命令：\n1 composer require mews/captcha 2、修改登录视图 在（login.blade.php）表单中添加验证码输入框和验证码图片区域：\nu0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;登录\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/layui-src/dist/css/layui.css\u0026#34;\u0026gt; \u0026lt;link href=\u0026#34;https://unpkg.com/layui@2.9.24/dist/css/layui.css\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/layui@2.9.24/dist/layui.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; /* 自定义样式 */ body { background-color: #f5f5f5; font-family: \u0026#39;Segoe UI\u0026#39;, Tahoma, Geneva, Verdana, sans-serif; } .login-container { max-width: 400px; margin: 80px auto; padding: 30px; background-color: white; border-radius: 10px; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); } .login-header { text-align: center; margin-bottom: 30px; } .login-header h1 { font-size: 24px; color: #333; font-weight: 500; } .layui-form-item { margin-bottom: 20px; margin-left: -30px; margin-right: 30px; } .layui-input { width: 100%; padding: 12px 15px; border: 1px solid #e0e0e0; border-radius: 4px; font-size: 14px; transition: border-color 0.3s; } .layui-input:focus { border-color: #1e88e5; box-shadow: 0 0 5px rgba(30, 136, 229, 0.3); } .layui-btn { width: 100%; border: none; border-radius: 4px; color: white; font-size: 14px; font-weight: 500; cursor: pointer; } .layui-btn:hover { opacity: 0.9; } .register-link { text-align: center; margin-top: 20px; } .register-link a { text-decoration: none; font-size: 14px; } .register-link a:hover { text-decoration: underline; } /* 响应式设计 */ @media (max-width: 480px) { .login-container { margin: 40px 15px; } } .captcha-img { cursor: pointer; height: 38px; border: 1px solid #e0e0e0; border-radius: 4px; vertical-align: middle; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;login-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;login-header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;登录\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;form class=\u0026#34;layui-form\u0026#34; id=\u0026#34;loginForm\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;layui-form-item\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;layui-form-label\u0026#34;\u0026gt;姓名\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;layui-input-block\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;name\u0026#34; required lay-verify=\u0026#34;required\u0026#34; placeholder=\u0026#34;请输入姓名或邮箱\u0026#34; autocomplete=\u0026#34;off\u0026#34; class=\u0026#34;layui-input\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;layui-form-item\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;layui-form-label\u0026#34;\u0026gt;密码\u0026lt;/label\u0026gt; \u0026lt;div class=\u0026#34;layui-input-block\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; name=\u0026#34;password\u0026#34; required lay-verify=\u0026#34;required\u0026#34; placeholder=\u0026#34;请输入密码\u0026#34; autocomplete=\u0026#34;off\u0026#34; class=\u0026#34;layui-input\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;layui-form-item\u0026#34; style=\u0026#34;display: flex\u0026#34;\u0026gt; \u0026lt;label class=\u0026#34;layui-form-label\u0026#34;\u0026gt;验证码\u0026lt;/label\u0026gt; \u0026lt;div style=\u0026#34;width: 150px;margin-right: 10px\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;captcha\u0026#34; required lay-verify=\u0026#34;required\u0026#34; placeholder=\u0026#34;验证码\u0026#34; class=\u0026#34;layui-input\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;img src=\u0026#34;{{ captcha_src() }}\u0026#34; alt=\u0026#34;点击刷新验证码\u0026#34; class=\u0026#34;captcha-img\u0026#34; onclick=\u0026#34;this.src=\u0026#39;{{ captcha_src() }}?\u0026#39;+Math.random()\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;layui-form-item\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;layui-input-block\u0026#34;\u0026gt; \u0026lt;button class=\u0026#34;layui-btn\u0026#34; lay-submit lay-filter=\u0026#34;login\u0026#34;\u0026gt;登录\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div class=\u0026#34;register-link\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ route(\u0026#39;register\u0026#39;) }}\u0026#34; style=\u0026#34;margin-right: 20px\u0026#34;\u0026gt;注册新账号\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/password/reset\u0026#34;\u0026gt;忘记密码？\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; layui.use([\u0026#39;form\u0026#39;], function(){ var form = layui.form; var $ = layui.$; form.on(\u0026#39;submit(login)\u0026#39;, function(data){ login(data.field); return false; }); }); async function login(data) { try { const response = await axios.post(\u0026#39;/login\u0026#39;, data); if (response.data.code === 200) { layui.use(\u0026#39;layer\u0026#39;, function(){ var layer = layui.layer; layer.msg(response.data.message, {icon: 1, time: 1000}, function(){ window.location.href = response.data.data.redirectUrl; }); }); } else { layui.use(\u0026#39;layer\u0026#39;, function(){ var layer = layui.layer; layer.msg(response.data.message, {icon: 2, time: 2000}); }); } } catch (error) { // 处理验证码等验证错误（Laravel默认返回422状态码） if (error.response \u0026amp;\u0026amp; error.response.status === 422) { const errors = error.response.data.errors; const firstError = Object.values(errors)[0][0]; layui.use(\u0026#39;layer\u0026#39;, function(){ var layer = layui.layer; layer.msg(firstError, {icon: 2, time: 2000}); }); } else { layui.use(\u0026#39;layer\u0026#39;, function(){ var layer = layui.layer; layer.msg(\u0026#39;登录失败，请重试\u0026#39;, {icon: 2, time: 2000}); }); } console.error(\u0026#39;Login error:\u0026#39;, error); } } \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 3、修改登录控制器 在登录验证逻辑（LoginController.php）中添加验证码校验规则：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 \u0026lt;?php namespace App\\Http\\Controllers\\Auth; use App\\Http\\Controllers\\Controller; use Illuminate\\Http\\Request; use Illuminate\\Support\\Facades\\Auth; class LoginController extends Controller { public function __construct() { $this-\u0026gt;middleware(\u0026#39;guest\u0026#39;)-\u0026gt;except(\u0026#39;logout\u0026#39;); } public function showLoginForm() { return view(\u0026#39;auth.login\u0026#39;); } public function login(Request $request) { $request-\u0026gt;validate([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;required|string\u0026#39;, \u0026#39;password\u0026#39; =\u0026gt; \u0026#39;required|string\u0026#39;, \u0026#39;captcha\u0026#39; =\u0026gt; \u0026#39;required|captcha\u0026#39;, ]); // 动态选择认证字段：判断输入是否为邮箱 $loginInput = $request-\u0026gt;input(\u0026#39;name\u0026#39;); $field = filter_var($loginInput, FILTER_VALIDATE_EMAIL) ? \u0026#39;email\u0026#39; : \u0026#39;name\u0026#39;; $credentials = [ $field =\u0026gt; $loginInput, \u0026#39;password\u0026#39;=\u0026gt; $request-\u0026gt;input(\u0026#39;password\u0026#39;), ]; if (Auth::attempt($credentials)) { $request-\u0026gt;session()-\u0026gt;regenerate(); // 记录登录成功 \\App\\Services\\LogService::write( \u0026#39;login\u0026#39;, \u0026#39;用户登录成功\u0026#39;, [\u0026#39;name\u0026#39; =\u0026gt; $request-\u0026gt;name] ); return response()-\u0026gt;json([ \u0026#39;code\u0026#39; =\u0026gt; 200, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;登录成功\u0026#39;, \u0026#39;data\u0026#39; =\u0026gt; [ \u0026#39;redirectUrl\u0026#39; =\u0026gt; route(\u0026#39;home\u0026#39;) ] ]); } // 记录登录失败 \\App\\Services\\LogService::write( \u0026#39;login_failed\u0026#39;, \u0026#39;登录失败\u0026#39;, [ \u0026#39;name\u0026#39; =\u0026gt; $request-\u0026gt;name, \u0026#39;errors\u0026#39; =\u0026gt; \u0026#39;姓名或密码不正确\u0026#39; ] ); return response()-\u0026gt;json([ \u0026#39;code\u0026#39; =\u0026gt; 400, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;姓名或密码不正确\u0026#39; ]); } public function logout(Request $request) { Auth::logout(); $request-\u0026gt;session()-\u0026gt;invalidate(); $request-\u0026gt;session()-\u0026gt;regenerateToken(); // 记录退出登录 \\App\\Services\\LogService::write( \u0026#39;logout\u0026#39;, \u0026#39;用户退出登录\u0026#39;, [\u0026#39;user_id\u0026#39; =\u0026gt; Auth::id()] ); return response()-\u0026gt;json([ \u0026#39;code\u0026#39; =\u0026gt; 200, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;退出成功\u0026#39;, \u0026#39;data\u0026#39; =\u0026gt; [ \u0026#39;redirectUrl\u0026#39; =\u0026gt; \u0026#39;/login\u0026#39; ] ]); } } 4、验证配置（可选） 如果需要自定义验证码样式（如长度、字符集），可以发布配置文件：\n1 php artisan vendor:publish --provider=\u0026#34;Mews\\Captcha\\CaptchaServiceProvider\u0026#34; 然后修改config/captcha.php中的参数（如length控制验证码位数，width控制图片宽度等）。\n","date":"2025-05-28T11:18:07+08:00","image":"https://Bright9911.github.io/p/laravel%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95/93314e48ec9513292e4b1e8ca1c73c9d_hu_95bf37cabead8254.jpg","permalink":"https://Bright9911.github.io/p/laravel%E9%AA%8C%E8%AF%81%E7%A0%81%E7%99%BB%E5%BD%95/","title":"【Laravel】验证码登录"},{"content":"1、发送纯文字 1.1、.env配置 1 2 3 4 5 6 7 8 MAIL_MAILER=smtp MAIL_HOST=smtp.163.com MAIL_PORT=465 MAIL_USERNAME={自己的邮箱}@163.com MAIL_PASSWORD={邮箱密钥} MAIL_ENCRYPTION=ssl MAIL_FROM_ADDRESS={自己的邮箱}@163.com MAIL_FROM_NAME=\u0026#34;${APP_NAME}\u0026#34; 1.2、EmailController.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 \u0026lt;?php namespace App\\Http\\Controllers; use App\\Mail\\VerificationCodeEmail; use Illuminate\\Support\\Facades\\Mail; use Illuminate\\Support\\Str; use Illuminate\\Support\\Facades\\Session; class EmailController extends Controller { public function sendMail() { $email = request()-\u0026gt;input(\u0026#39;email\u0026#39;); // 验证邮箱格式 if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { return response()-\u0026gt;json([ \u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;无效的邮箱地址\u0026#39; ]); } // 生成验证码 $code = mt_rand(1000, 9999); Session::put(\u0026#39;email_verification_code\u0026#39;, $code); // 发送纯文本邮件 Mail::raw(\u0026#34;尊敬的用户，您的验证码为：{$code}，请在5分钟内完成验证。\u0026#34;, function ($message) use ($email) { $message-\u0026gt;to($email)-\u0026gt;subject(\u0026#39;验证码邮件\u0026#39;); }); if (Mail::failures()) { return response()-\u0026gt;json([ \u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;邮件发送失败，请重试！\u0026#39; ]); } return response()-\u0026gt;json([ \u0026#39;success\u0026#39; =\u0026gt; true, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;验证码已发送，请查收！\u0026#39; ]); } } 1.3、web.php 1 2 3 4 5 Route::get(\u0026#39;/mail\u0026#39;, function () { return view(\u0026#39;email.email\u0026#39;); }); Route::get(\u0026#39;/mail/send\u0026#39;, [EmailController::class, \u0026#39;sendMail\u0026#39;]); 1.4、email.blade.php 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;发送验证码\u0026lt;/title\u0026gt; \u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.6.0.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div style=\u0026#34;max-width: 500px; margin: 0 auto; padding: 20px;\u0026#34;\u0026gt; \u0026lt;h2\u0026gt;发送验证码\u0026lt;/h2\u0026gt; \u0026lt;form id=\u0026#34;verification-form\u0026#34;\u0026gt; \u0026lt;div style=\u0026#34;margin-bottom: 15px;\u0026#34;\u0026gt; \u0026lt;label for=\u0026#34;email\u0026#34;\u0026gt;邮箱地址:\u0026lt;/label\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;email\u0026#34; name=\u0026#34;email\u0026#34; placeholder=\u0026#34;请输入邮箱地址\u0026#34; required style=\u0026#34;width: 100%; padding: 8px; margin-top: 5px;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;button type=\u0026#34;submit\u0026#34; id=\u0026#34;send-btn\u0026#34; style=\u0026#34;padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer;\u0026#34;\u0026gt;发送验证码\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;div id=\u0026#34;message\u0026#34; style=\u0026#34;margin-top: 20px; padding: 10px; border-radius: 5px; display: none;\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; $(document).ready(function() { $(\u0026#39;#verification-form\u0026#39;).on(\u0026#39;submit\u0026#39;, function(e) { e.preventDefault(); // 获取邮箱地址 const email = $(\u0026#39;#email\u0026#39;).val(); // 验证邮箱格式 const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; if (!emailRegex.test(email)) { $(\u0026#39;#message\u0026#39;).css(\u0026#39;background-color\u0026#39;, \u0026#39;#f44336\u0026#39;).text(\u0026#39;请输入有效的邮箱地址！\u0026#39;); $(\u0026#39;#message\u0026#39;).show(); return; } // 禁用按钮，防止重复点击 $(\u0026#39;#send-btn\u0026#39;).prop(\u0026#39;disabled\u0026#39;, true).text(\u0026#39;发送中...\u0026#39;); // 发送AJAX请求 $.ajax({ url: \u0026#39;/mail/send\u0026#39;, type: \u0026#39;GET\u0026#39;, data: { email: email }, success: function(response) { if (response.success) { $(\u0026#39;#message\u0026#39;).css(\u0026#39;background-color\u0026#39;, \u0026#39;#4CAF50\u0026#39;).text(\u0026#39;验证码已发送，请查收！\u0026#39;); } else { $(\u0026#39;#message\u0026#39;).css(\u0026#39;background-color\u0026#39;, \u0026#39;#f44336\u0026#39;).text(response.message || \u0026#39;发送失败，请重试！\u0026#39;); } $(\u0026#39;#message\u0026#39;).show(); }, error: function() { $(\u0026#39;#message\u0026#39;).css(\u0026#39;background-color\u0026#39;, \u0026#39;#f44336\u0026#39;).text(\u0026#39;网络错误，请重试！\u0026#39;); $(\u0026#39;#message\u0026#39;).show(); }, complete: function() { // 恢复按钮状态 $(\u0026#39;#send-btn\u0026#39;).prop(\u0026#39;disabled\u0026#39;, false).text(\u0026#39;发送验证码\u0026#39;); } }); }); // 5秒后自动隐藏消息 const observer = new MutationObserver(function(mutations) { mutations.forEach(function(mutation) { if (mutation.target.id === \u0026#39;message\u0026#39;) { setTimeout(function() { $(\u0026#39;#message\u0026#39;).hide(); }, 5000); } }); }); observer.observe(document.getElementById(\u0026#39;message\u0026#39;), { attributes: true, childList: true, characterData: true }); }); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2、发送模板 2.1、创建邮件模板 在 resources/views/emails 目录下创建一个新的视图文件，例如 verification.blade.php。这个文件将作为邮件的模板。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;验证码邮件\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; } .container { max-width: 600px; margin: 0 auto; padding: 20px; background-color: #fff; border-radius: 5px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); } .header { background-color: #4CAF50; color: white; padding: 10px; border-radius: 5px 5px 0 0; text-align: center; } .content { padding: 20px; } .footer { text-align: center; padding: 10px; color: #777; font-size: 12px; } .code { font-size: 24px; font-weight: bold; color: #4CAF50; text-align: center; padding: 10px; margin: 20px 0; background-color: #f9f9f9; border-radius: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;验证码邮件\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;尊敬的用户，您的验证码为：\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;code\u0026#34;\u0026gt;{{ $code }}\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;请在5分钟内完成验证。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;p\u0026gt;© 2023 验证码系统。保留所有权利。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 2.2、创建邮件类 使用 Artisan 命令创建一个邮件类：\n1 php artisan make:mail VerificationMail 2.3、更新邮件类 打开 app/Mail/VerificationMail.php 文件，并更新其内容：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 \u0026lt;?php namespace App\\Mail; use Illuminate\\Bus\\Queueable; use Illuminate\\Mail\\Mailable; use Illuminate\\Queue\\SerializesModels; class VerificationMail extends Mailable { use Queueable, SerializesModels; public $code; /** * Create a new message instance. * * @param string $code * @return void */ public function __construct($code) { $this-\u0026gt;code = $code; } /** * Build the message. * * @return $this */ public function build() { return $this-\u0026gt;view(\u0026#39;emails.verification\u0026#39;) -\u0026gt;subject(\u0026#39;验证码邮件\u0026#39;); } } 2.4、更新控制器 在 MailController 中使用 VerificationMail 类来发送邮件：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 use App\\Mail\\VerificationMail; use Illuminate\\Support\\Facades\\Mail; use Illuminate\\Support\\Facades\\Session; public function sendMail() { try { $email = request()-\u0026gt;input(\u0026#39;email\u0026#39;); // 验证邮箱格式 if (!filter_var($email, FILTER_VALIDATE_EMAIL)) { return response()-\u0026gt;json([ \u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;无效的邮箱地址\u0026#39; ]); } // 生成验证码 $code = mt_rand(1000, 9999); Session::put(\u0026#39;email_verification_code\u0026#39;, $code); // 发送邮件 Mail::to($email)-\u0026gt;send(new VerificationMail($code)); if (Mail::failures()) { return response()-\u0026gt;json([ \u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;邮件发送失败，请重试！\u0026#39; ]); } return response()-\u0026gt;json([ \u0026#39;success\u0026#39; =\u0026gt; true, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;验证码已发送，请查收！\u0026#39; ]); } catch (\\Exception $e) { return response()-\u0026gt;json([ \u0026#39;success\u0026#39; =\u0026gt; false, \u0026#39;message\u0026#39; =\u0026gt; \u0026#39;服务器错误：\u0026#39; . $e-\u0026gt;getMessage() ]); } } 3、恶搞页面 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;恭喜您中奖了！\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; body { font-family: Arial, sans-serif; line-height: 1.6; margin: 0; padding: 0; background-color: #f4f4f4; } .container { max-width: 600px; margin: 0 auto; padding: 20px; background-color: #fff; border-radius: 5px; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); } .header { background-color: #FFD700; color: white; padding: 10px; border-radius: 5px 5px 0 0; text-align: center; } .content { padding: 20px; } .footer { text-align: center; padding: 10px; color: #777; font-size: 12px; } .prize { font-size: 24px; font-weight: bold; color: #FFD700; text-align: center; padding: 10px; margin: 20px 0; background-color: #f9f9f9; border-radius: 5px; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;header\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;恭喜您中奖了！\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;content\u0026#34;\u0026gt; \u0026lt;p\u0026gt;尊敬的用户，您已被选为本月的幸运用户！\u0026lt;/p\u0026gt; \u0026lt;div class=\u0026#34;prize\u0026#34;\u0026gt;恭喜您获得了一款神秘游戏：好玩的贪吃蛇！\u0026lt;/div\u0026gt; \u0026lt;p\u0026gt;请点击下方链接领取您的大奖：\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;a href=\u0026#34;https://github.com/JIEJOE-Visual/snakeball\u0026#34; style=\u0026#34;color: #FFD700; text-decoration: none; padding: 10px 20px; background-color: #333; border-radius: 5px; display: inline-block;\u0026#34;\u0026gt;立即领取\u0026lt;/a\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;注意：此链接将在24小时内有效，请尽快领取！\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;footer\u0026#34;\u0026gt; \u0026lt;p\u0026gt;© 2025 幸运抽奖系统。保留所有权利。\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","date":"2025-05-28T11:08:31+08:00","image":"https://Bright9911.github.io/p/laravel%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/9ad3bf3c4aadf61bd96eebfc1f7f577e_hu_a84eb2a2aa939353.jpg","permalink":"https://Bright9911.github.io/p/laravel%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/","title":"【Laravel】邮件发送"},{"content":" 前言：\n博客文章统计组件个人找到了两个，分别是不蒜子，以及vercount\n不蒜子比较老，但很稳定，到现在仍然可以使用，没有停服\nvercount则比较新，并做了一些代码优化\n两种使用都基本一样，差别不大，看自己喜好，下面的教程是以vercount来举例，用不蒜子的话，就把对应的脚本和元素标签替换一下就好\n1、基本引入 （1）修改layouts/partials/footer/custom.html（不存在则自行创建），引入脚本 1 2 \u0026lt;!-- vercount的脚本；若用不蒜子，则更换成不蒜子的脚本就好 --\u0026gt; \u0026lt;script defer src=\u0026#34;https://cn.vercount.one/js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; （2）准备一张浏览量的icon(Ctrl+S保存)，放到assets/icons文件夹下\n（3）修改layouts/article/components/details.html，在合适的位置下加入以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; ... \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; ... \u0026lt;!-- 浏览量统计 --\u0026gt; \u0026lt;div id=\u0026#34;viewCount\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;eye\u0026#34; }} \u0026lt;time class=\u0026#34;article-time--reading\u0026#34;\u0026gt; \u0026lt;!-- vercount统计当前页面浏览数的标签；若用不蒜子，更换成不蒜子对应的标签就好 --\u0026gt; \u0026lt;span id=\u0026#34;vercount_value_page_pv\u0026#34;\u0026gt;loading... \u0026lt;/span\u0026gt;次 \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/footer\u0026gt; ... \u0026lt;/div\u0026gt; （4）这样文章详情的开头就显示浏览数了 2、问题修复 问题描述：\n博客首页的文章列表显示了浏览数，且只有第一篇文章才有浏览数，并且浏览数的数字不正确 产生原因：\nlayouts/partials/article/components/details.html此html文件也被用在了博客首页的文章列表，所以也触发了vercount读取当前页面的浏览数 因为读取的数据是当前页面的浏览数，也就是首页的浏览数，并非文章的浏览数，所以数据只加载一次，且不准确 解决思路：\n由于vercount并未提供只查询文章浏览数的接口，只有一个文章浏览数+1，并且返回浏览数的接口，所以无法实现首页对每篇文章的浏览数的单独查询 既然无法实现首页展示每篇文章的单独浏览数，那就直接隐藏就好了，等点入文章才看到具体的浏览数 具体操作：\n（1）修改layouts/partials/footer/custom.html，引入以下代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;script\u0026gt; function showHideView() { // 判断是否存在vercount标签 let viewCounts = document.querySelectorAll(\u0026#34;#viewCount\u0026#34;); if (viewCounts) { // 判断是否为文章页 let article = document.querySelector(\u0026#34;.article-page\u0026#34;); if (!article) { viewCounts.forEach(ele =\u0026gt; { ele.style.display = \u0026#39;none\u0026#39;; }); } } } showHideView(); \u0026lt;/script\u0026gt; ","date":"2025-05-28T07:46:55+08:00","image":"https://Bright9911.github.io/p/hugo%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E9%87%8F%E7%BB%9F%E8%AE%A1/2077_hu_7198e0f8f703be9b.jpg","permalink":"https://Bright9911.github.io/p/hugo%E6%96%87%E7%AB%A0%E6%B5%8F%E8%A7%88%E9%87%8F%E7%BB%9F%E8%AE%A1/","title":"【Hugo】文章浏览量统计"},{"content":"1、修改背景图 （1）准备一张背景图，尽可能大一点，并放到assets/background文件夹下（不存在则自己创建）\n（2）在页脚文件layouts/partials/footer/custom.html中（不存在则自己创建），引入以下代码，修改对应的背景图片名\n1 2 3 4 5 6 7 \u0026lt;style\u0026gt; body { background: url({{ (resources.Get \u0026#34;background/背景图片名\u0026#34;).Permalink }}) no-repeat center top; background-size: cover; background-attachment: fixed; } \u0026lt;/style\u0026gt; 2、引入动态背景 2.1、樱花飞舞 （1）下载【sakura.js】（Ctrl + S 保存），并放到assets/background文件夹下\n（2）在layouts/partials/footer/custom.html中，引入以下代码\n1 \u0026lt;script src={{ (resources.Get \u0026#34;background/sakura.js\u0026#34;).Permalink }}\u0026gt;\u0026lt;/script\u0026gt; 2.2、点线漂浮（particles.js） 【particles.js文档】\n（1）前往【配置页面】配置参数，参数按自己喜好即可，唯一注意要修改的参数是 detect_on，要改成 window\n（2）下载配置文件，以及 particles.js 所需要的js文件\n[particlesjs-config.json]（Ctrl + S 保存），本博客的动态背景json配置，有需求的可直接下载\n（3） 把下载好的文件，解压并将以下两个文件放到assets/background文件夹下\nparticlesjs-config.json particles.min.js （4）在layouts/partials/footer/custom.html中，引入以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 \u0026lt;div id=\u0026#34;particles-js\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src={{ (resources.Get \u0026#34;background/particles.min.js\u0026#34;).Permalink }}\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt; particlesJS.load(\u0026#39;particles-js\u0026#39;, {{ (resources.Get \u0026#34;background/particlesjs-config.json\u0026#34;).Permalink }}, function() { console.log(\u0026#39;particles.js loaded - callback\u0026#39;); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; #particles-js { position: fixed; top: 0; left: 0; width: 100%; z-index: -1; } \u0026lt;/style\u0026gt; ","date":"2025-05-27T15:07:38+08:00","image":"https://Bright9911.github.io/p/hugo%E4%BF%AE%E6%94%B9%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E5%B9%B6%E5%BC%95%E5%85%A5%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF/6b951400bb98fd5fcd57d2c9599df286_hu_bc28574fd5832c4f.jpg","permalink":"https://Bright9911.github.io/p/hugo%E4%BF%AE%E6%94%B9%E5%8D%9A%E5%AE%A2%E8%83%8C%E6%99%AF%E5%B9%B6%E5%BC%95%E5%85%A5%E5%8A%A8%E6%80%81%E8%83%8C%E6%99%AF/","title":"【Hugo】修改博客背景并引入动态背景"},{"content":"1、修改字体 （1）前往【100font】，下载自己想要的字体，字体文件为 fusion-pixel-10px-monospaced-zh_hans.ttf （2）把字体文件放入assets/font下(文件夹自己创建) （3）将以下代码修改并复制到layouts/partials/footer/custom.html文件中(文件不存在就自己创建) 1 2 3 4 5 6 7 8 9 10 11 \u0026lt;style\u0026gt; @font-face { font-family: \u0026#39;字体名\u0026#39;; src: url({{ (resources.Get \u0026#34;font/字体文件名\u0026#34;).Permalink }}) format(\u0026#39;truetype\u0026#39;); } :root { --base-font-family: \u0026#39;字体名\u0026#39;; --code-font-family: \u0026#39;字体名\u0026#39;; } \u0026lt;/style\u0026gt; （4）这样博客字体就修改好了 2、修改鼠标样式 （1）准备好鼠标样式图片(默认，指针，文本…)，图片大小建议控制在 32px 左右，将图片放入static/mouse文件夹下（文件夹自己创建）\n演示鼠标来源：【B站up主】\n（2）修改assets/scss/custom.scss（文件不存在则自己创建），将以下代码复制进去，根据主题按实际情况填写对应的css选择器\n1 2 3 4 5 6 7 8 9 10 11 // 【鼠标样式常规写法】 body, html { cursor: url(../mouse/默认光标图片名), auto !important; } css选择器 { cursor: url(../mouse/其他光标图片名), auto; } （3）以下是调试好的 stack 主题的鼠标样式，同样是stack主题的可以直接复制，修改对应的图片名即可 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // 【Stack主题鼠标样式写法】 // default光标图片 body, html, .article-content img { cursor: url(../mouse/默认光标图片名), auto !important; } // pointer光标图片 a:hover, button:hover, .copyCodeButton:hover, #dark-mode-toggle { cursor: url(../mouse/指针光标图片名), auto; } // text光标图片 input:hover, .site-description, .article-subtitle, .article-content span, .article-content li, .article-content p { cursor: url(../mouse/文本光标图片名), auto; } 3、显示文章更新时间 （1）在配置文件 hugo.yaml 中加入以下配置 1 2 3 4 5 6 7 8 # 更新时间：优先读取git时间 -\u0026gt; git时间不存在，就读取本地文件修改时间 frontmatter: lastmod: - :git - :fileModTime # 允许获取Git信息\tenableGitInfo: true （2）修改github action文件.github/workflows/xxx.yaml，在运行 hugo -D 命令的step前加入以下配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ...... jobs: deploy: steps: - name: Git Configuration run: | git config --global core.quotePath false git config --global core.autocrlf false git config --global core.safecrlf true git config --global core.ignorecase false ...... - name: Build Web run: hugo -D ...... （3）这样就提交代码时，就会去读取git时间，来更新文章的更新时间\nstack主题的文章更新时间在文章底部\n（4）若想在文章开头就显示更新时间，修改layouts/partials/article/components/details.html，在指定位置引入以下代码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 \u0026lt;div class=\u0026#34;article-details\u0026#34;\u0026gt; ... \u0026lt;footer class=\u0026#34;article-time\u0026#34;\u0026gt; ... \u0026lt;!-- 更新时间 --\u0026gt; {{- if ne .Lastmod .Date -}} \u0026lt;div class=\u0026#34;article-lastmod\u0026#34;\u0026gt; {{ partial \u0026#34;helper/icon\u0026#34; \u0026#34;clock\u0026#34; }} \u0026lt;time\u0026gt; {{ .Lastmod.Format ( or .Site.Params.dateFormat.lastUpdated \u0026#34;Jan 02, 2006 15:04 MST\u0026#34; ) }} \u0026lt;/time\u0026gt; \u0026lt;/div\u0026gt; {{- end -}} .... \u0026lt;/footer\u0026gt; ... \u0026lt;/div\u0026gt; 这样就会文章开头显示修改时间\ntips: 更新时间的格式去 hugo.yaml 中的 params.dateFormat.lastUpdated 进行修改\n4、友链、归档多列显示 修改assets/scss/custom.scss文件(不存在则自行创建)，引入以下css样式代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 @media (min-width: 1024px) { .article-list--compact { display: grid; // 目前是两列，如需三列，则后面再加一个1fr，以此类推 grid-template-columns: 1fr 1fr; background: none; box-shadow: none; gap: 1rem; article { background: var(--card-background); border: none; box-shadow: var(--shadow-l2); margin-bottom: 8px; margin-right: 8px; border-radius: 16px; } } } 5、文章目录折叠\u0026amp;展开 （1）将以下代码复制到layouts/partials/footer/custom.html文件中(文件不存在则自行创建) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 \u0026lt;style\u0026gt; #TableOfContents \u0026gt; ul, ol { ul, ol { display: none; } .open { display: block; } } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; function initTocHide() { // 判断是否存在文章目录 let toc = document.querySelector(\u0026#34;.widget--toc\u0026#34;); if (!toc) { return; } // 监听滚动 window.addEventListener(\u0026#39;scroll\u0026#39;, function() { //清除class值 let openUl = document.querySelectorAll(\u0026#34;.open\u0026#34;); if (openUl.length \u0026gt; 0) { openUl.forEach((ul) =\u0026gt; { ul.classList.remove(\u0026#34;open\u0026#34;) }) } // 获取active-class let currentLi = document.querySelector(\u0026#34;.active-class\u0026#34;); if (!currentLi) { return } // 展示子ul if (currentLi.children.length \u0026gt; 1) { currentLi.children[1].classList.add(\u0026#34;open\u0026#34;) } // 展示父ul let ul = currentLi.parentElement; do { ul.classList.add(\u0026#34;open\u0026#34;); ul = ul.parentElement.parentElement } while (ul !== undefined \u0026amp;\u0026amp; (ul.localName === \u0026#39;ul\u0026#39; || ul.localName === \u0026#39;ol\u0026#39;)) }); } initTocHide() \u0026lt;/script\u0026gt; （2）这样文章就会默认隐藏子目录，等滚动到对应的目录后，才会将子目录进行展示 6、添加’返回顶部’按钮 （1）准备一张返回顶部图片(Ctrl+S保存)，放到assets/icons文件夹下（不存在则自行创建）\n（2）将以下代码复制到layouts/partials/footer/custom.html文件中（不存在则自行创建）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 \u0026lt;style\u0026gt; #backTopBtn { display: none; position: fixed; bottom: 30px; z-index: 99; cursor: pointer; width: 30px; height: 30px; background-image: url({{ (resources.Get \u0026#34;icons/backTop.svg\u0026#34;).Permalink }}); } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; /** * 滚动回顶部初始化 */ function initScrollTop() { let rightSideBar = document.querySelector(\u0026#34;.right-sidebar\u0026#34;); if (!rightSideBar) { return; } // 添加返回顶部按钮到右侧边栏 let btn = document.createElement(\u0026#34;div\u0026#34;); btn.id = \u0026#34;backTopBtn\u0026#34;; btn.onclick = backToTop rightSideBar.appendChild(btn) // 滚动监听 window.onscroll = function() { // 当网页向下滑动 20px 出现\u0026#34;返回顶部\u0026#34; 按钮 if (document.body.scrollTop \u0026gt; 20 || document.documentElement.scrollTop \u0026gt; 20) { btn.style.display = \u0026#34;block\u0026#34;; } else { btn.style.display = \u0026#34;none\u0026#34;; } }; } /** * 返回顶部 */ function backToTop(){ window.scrollTo({ top: 0, behavior: \u0026#34;smooth\u0026#34; }) } initScrollTop(); \u0026lt;/script\u0026gt; （3）这样当我们页面滚动到一定距离后，右下角会出现返回顶部的按钮，点击后可以平滑地返回顶部 7、macOS风格的代码块 （1）准备一张macOS代码块的红绿灯图片(Ctrl+S保存), 放到static/icons文件夹下\n（2）将以下代码复制进assets/scss/custom.scss文件中(不存在则自行创建)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 .highlight { border-radius: var(--card-border-radius); max-width: 100% !important; margin: 0 !important; box-shadow: var(--shadow-l1) !important; } .highlight:before { content: \u0026#34;\u0026#34;; display: block; background: url(../icons/macOS-code-header.svg) no-repeat 0; background-size: contain; height: 18px; margin-top: -10px; margin-bottom: 10px; } 8、自定义MD引用块颜色模板 参考文章：让Hugo支持GitHub风格的块引用Alerts\n（1）创建文件layouts/_default/_markup/render-blockquote-alert.html，并将以下代码复制进去\n1 2 3 \u0026lt;blockquote class=\u0026#34;alert alert-{{ .AlertType }}\u0026#34;\u0026gt; {{ .Text | safeHTML -}} \u0026lt;/blockquote\u0026gt; （2）将以下代码复制进assets/scss/custom.scss文件中(不存在则自行创建)\n配色参考来源：martignoni/hugo-notice\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 [data-scheme=\u0026#34;light\u0026#34;] { .alert-note { --card-separator-color: #65bbee; --blockquote-background-color: #e7f2fa; } .alert-tip { --card-separator-color: #55aa55; --blockquote-background-color: #eeffee; } .alert-warn { --card-separator-color: #ffbb78; --blockquote-background-color: #ffeecc; } .alert-error { --card-separator-color: #cc3334; --blockquote-background-color: #ffeeef; } } [data-scheme=\u0026#34;dark\u0026#34;] { .alert-note { --card-separator-color: #006699; --blockquote-background-color: #002234; } .alert-tip { --card-separator-color: #336733; --blockquote-background-color: #112310; } .alert-warn { --card-separator-color: #aa5501; --blockquote-background-color: #452300; } .alert-error { --card-separator-color: #880000; --blockquote-background-color: #450000; } } （3）使用方法 可选项：NOTE | TIP | WARN | ERROR 可仿照上面css写法，自行添加新的css样式，来实现更多的可选项 1 2 \u0026gt; [!NOTE] \u0026gt; 这是markdown的引用块语法 1 2 3 4 // markdown写法如下： \u0026lt;blockquote class=\u0026#34;alert-note\u0026#34;\u0026gt; alert-note \u0026lt;/blockquote\u0026gt; alert-note alert-tip alert-warn alert-error 9、代码块过长折叠\u0026amp;展开 代码块折叠的样式风格完全仿照CSDN来实现的\n（1）准备一张向下展开图片(Ctrl+S保存)，放到assets/icons目录下\n（2）将以下代码复制进layouts/partials/footer/custom.html（文件不存在则自行创建）\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 \u0026lt;style\u0026gt; .highlight { /* 你可以根据需要调整这个高度 */ max-height: 400px; overflow: hidden; } .code-show { max-height: none !important; } .code-more-box { width: 100%; padding-top: 78px; background-image: -webkit-gradient(linear, left top, left bottom, from(rgba(255, 255, 255, 0)), to(#fff)); position: absolute; left: 0; right: 0; bottom: 0; z-index: 1; } .code-more-btn { display: block; margin: auto; width: 44px; height: 22px; background: #f0f0f5; border-top-left-radius: 8px; border-top-right-radius: 8px; padding-top: 6px; cursor: pointer; } .code-more-img { cursor: pointer !important; display: block; margin: auto; width: 22px; height: 16px; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; function initCodeMoreBox() { let codeBlocks = document.querySelectorAll(\u0026#34;.highlight\u0026#34;); if (!codeBlocks) { return; } codeBlocks.forEach(codeBlock =\u0026gt; { // 校验是否overflow if (codeBlock.scrollHeight \u0026lt;= codeBlock.clientHeight) { return; } // 元素初始化 // codeMoreBox let codeMoreBox = document.createElement(\u0026#39;div\u0026#39;); codeMoreBox.classList.add(\u0026#39;code-more-box\u0026#39;); // codeMoreBtn let codeMoreBtn = document.createElement(\u0026#39;span\u0026#39;); codeMoreBtn.classList.add(\u0026#39;code-more-btn\u0026#39;); codeMoreBtn.addEventListener(\u0026#39;click\u0026#39;, () =\u0026gt; { codeBlock.classList.add(\u0026#39;code-show\u0026#39;); codeMoreBox.style.display = \u0026#39;none\u0026#39;; // 触发resize事件，重新计算目录位置 window.dispatchEvent(new Event(\u0026#39;resize\u0026#39;)) }) // img let img = document.createElement(\u0026#39;img\u0026#39;); img.classList.add(\u0026#39;code-more-img\u0026#39;); img.src = {{ (resources.Get \u0026#34;icons/codeMore.png\u0026#34;).Permalink }} // 元素添加 codeMoreBtn.appendChild(img); codeMoreBox.appendChild(codeMoreBtn); codeBlock.appendChild(codeMoreBox) }) } initCodeMoreBox(); \u0026lt;/script\u0026gt; ","date":"2025-05-27T11:20:48+08:00","image":"https://Bright9911.github.io/p/hugostack%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%AE%E6%94%B9/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://Bright9911.github.io/p/hugostack%E4%B8%BB%E9%A2%98%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BF%AE%E6%94%B9/","title":"【Hugo】Stack主题自定义修改"},{"content":"1、环境准备 1.1、Git下载 前往Git官网，下载安装程序 一直点下一步，默认安装即可 1.2、Hugo下载 前往Tags · gohugoio/hugo下载对应版本 Windows版本：hugo_extended_xxxxx_windows_amd64.zip 2、搭建博客 2.1、创建博客 （1）在hugo.exe所在文件夹的地址栏敲打cmd，然后Enter唤起命令行\n（2）敲打命令hugo new site xxxx创建hugo文件\n（3）敲打命名cd xxxx切换目录，并把hugo.exe复制到刚生成的文件夹中\n（4）敲打命令hugo server -D启动服务，访问http://localhost:1313，Ctrl+C停止服务\n（hugo默认是没有主题的，需要进行主题配置）\n2.2、配置主题 （1）前往【Hugo Themes】，查找自己喜欢的主题，进行下载 （2）这边以【Stack主题】为例，将下载好的主题解压，放到/themes文件夹中（这里我的网站名称是dev，从上一步创建博客的第2步中的xxx得来） （3）将exampleSite样例数据中的 Content 和 hugo.yaml 复制到主文件夹中，并删掉hugo.toml和content/post/rich-content （4）修改 hugo.yaml 中的 theme，将他修改为跟主题文件夹同名 （5）再次启动hugo服务，查看主题，具体主题配置修改 hugo.yaml，这里不细说，感兴趣可自行查找相关文章 2.3、发布文章 （1）使用以下命令生成文章（文章名无所谓，可以修改） 1 hugo new content post/{文章名}/index.md （2）生成文章之后，在content/post/{文章名字}/index.md中编写文章\n（3）文章开头配置（自行修改）\n1 2 3 4 5 6 7 8 9 title = \u0026#39;{文章名}\u0026#39; date = 2025-05-23T14:53:41+08:00 draft = true categories = [ \u0026#34;hugo\u0026#34;, \u0026#34;github\u0026#34;, \u0026#34;笔记\u0026#34;, ] image = \u0026#34;the-creative-exchange-d2zvqp3fpro-unsplash.jpg\u0026#34; （4）图片引入格式如下 1 \u0026lt;img src=\u0026#34;4.png\u0026#34; alt=\u0026#34;hugo版本\u0026#34; style=\u0026#34;zoom:80%;\u0026#34; /\u0026gt; 3、Github部署 3.1、常规部署 （1）前往【Github官网】，创建仓库 {github用户名}.github.io\n（2）前往Setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启 https://{github用户名}.github.io 的地址，这地址也是以后访问博客的地址\n（3）回到hugo文件中，执行命令hugo -D，会生成 public 静态资源文件夹\n（4）在 public 执行以下命令上传到github仓库上，第一次上传可能需要输入账号密码\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main // 拓展 // 如果最后一行命令有问题可以先关闭ssl git config --global http.sslVerify false git push -u origin main // 再开启 git config --global http.sslVerify true // 修改之后再上传 git add . git commit -m \u0026#34;修改描述\u0026#34; git push // 如果是团队协作，需要先新建分支，再上传合并 （5）上传成功后访问 https://{github用户名}.github.io，成功搭建属于自己的Hugo博客 3.2、Github Action自动部署 （1）Github创建一个新的仓库，用于存放Hugo的主文件 （2）前往Setttings -\u0026gt; Developer Settings -\u0026gt; Personal access tokens，创建一个token(classic) （3）token选择永不过期，并勾选 repo 和 workflow 选项 （4）为保证安全，将生成的token，保存的仓库的变量中，前往Settings -\u0026gt; Secrets and variables -\u0026gt; Actions中设置 （5）在hugo主文件创建一个.github/workflows/hugo_deploy.yaml文件，将以下内容复制进去，想具体了解更多，可查看【Github Action文档】 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的token变量名 }} EXTERNAL_REPOSITORY: 你的github名/你的仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy （6）在hugo主文件创建.gitignore文件，来避免提交不必要的文件 1 2 3 4 5 6 7 # 自动生成的文件 public resources .hugo_build.lock # hugo命令 hugo.exe （7）将hugo的主文件上传到仓库，上传成功后会触发Github Action，来自动部署你的静态页面 1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin {你的github仓库地址} git push -u origin main （8）之后修改页面只需要执行以下步骤即可 1 2 3 git add . git commit -m \u0026#34;修改描述\u0026#34; git push ","date":"2025-05-23T14:53:41+08:00","image":"https://Bright9911.github.io/p/hugohugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/the-creative-exchange-d2zvqp3fpro-unsplash_hu_27b8954607cdb515.jpg","permalink":"https://Bright9911.github.io/p/hugohugo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"【Hugo】Hugo+Github搭建个人博客"},{"content":"1、下载并解压 https://github.com/tporadowski/redis/releases\n2、启动Redis服务器 1 .\\redis-server.exe redis.windows.conf 默认端口为 6379，如果看到类似 Ready to accept connections 的消息，说明 Redis 服务已成功启动。\n3、测试Redis 1 .\\redis-cli.exe -h 127.0.0.1 -p 6379 执行 ping 命令，如果返回 PONG，说明 Redis 服务正常运行。\n4、将 Redis 注册为 Windows 服务（可选） 在 Redis 安装目录中，运行以下命令将 Redis 注册为 Windows 服务：\n1 redis-server.exe --service-install redis.windows.conf --service-name redisserver1 --loglevel verbose 启动服务：\n1 redis-server.exe --service-start --service-name redisserver1 通过 services.msc 查看服务是否安装成功，并可以配置为开机自启动。\n5、报错解决 当出现以下问题时：\n1 2 127.0.0.1:6379\u0026gt; del name (error) MISCONF Redis is configured to save RDB snapshots, but it is currently not able to persist on disk. Commands that may modify the data set are disabled, because this instance is configured to report errors during writes if RDB snapshotting fails (stop-writes-on-bgsave-error option). Please check the Redis logs for details about the RDB error. 临时解决方法：\n1 CONFIG SET stop-writes-on-bgsave-error no 持久解决方法：\n修改Redis配置文件\n找到 Redis 配置文件 redis.conf（通常位于 Redis 安装目录或 /etc/redis/redis.conf）。\n使用文本编辑器打开 redis.conf 文件，找到 stop-writes-on-bgsave-error 选项，并将其设置为 no：\n1 stop-writes-on-bgsave-error no 保存文件并重启 Redis 服务。\n6、Redis 常用命令总结 6.1、连接与服务器相关命令 连接命令 redis - cli：启动 Redis 客户端，用于与 Redis 服务器交互。 服务器信息和状态命令 INFO：提供 Redis 服务器的详细信息和统计指标。 DBSIZE：返回当前数据库中键值对的数量。 服务器配置命令 CONFIG GET ：获取 Redis 服务器指定配置项的值。 CONFIG SET ：设置 Redis 服务器指定配置项的值。 6.2、键（Key）相关命令 键的基本操作命令 DEL key1 [key2 ...]：删除一个或多个键。 EXISTS key：检查键是否存在。 EXPIRE key seconds：为键设置过期时间，以秒为单位。 TTL key：查看键的剩余生存时间。 RENAME key newkey：将键重命名。 RENAME NX key newkey：只有在新键不存在时，才会将键重命名。 键的遍历命令 KEYS pattern：查找所有符合给定模式的键。 SCAN cursor [MATCH pattern] [COUNT count]：迭代地遍历数据库中的键。 6.3、字符串（String）类型命令 基本赋值和获取命令 SET key value：将键值对存储到 Redis 中。 GET key：获取指定键的值。 GETSET key value：将键的旧值返回，并设置新值。 字符串操作命令 APPEND key value：将值追加到指定键的字符串值后面。 STRLEN key：获取指定键的字符串值的长度。 INCR key：将键的数值值增加 1。 INCRBY key increment：将键的数值值增加指定的增量。 DECR key：将键的数值值减 1。 DECRBY key decrement：将键的数值值减少指定的减量。 6.4、哈希（Hash）类型命令 哈希的基本操作命令 HSET key field value：将哈希表中字段的值设置为指定的值。 HGET key field：获取哈希表中指定字段的值。 HSETNX key field value：只有在字段不存在时，才将哈希表中字段的值设置为指定的值。 HMSET key field1 value1 field2 value2 ...：同时将多个字段值设置到哈希表中。 HMGET key field1 [field2 ...]：获取哈希表中多个字段的值。 HDEL key field1 [field2 ...]：删除哈希表中的一个或多个字段。 哈希的其他命令 HEXISTS key field：检查哈希表中指定字段是否存在。 HLEN key：获取哈希表中字段 - 值对的数量。 HKEYS key：获取哈希表中所有的字段。 HVALS key：获取哈希表中所有的值。 HGETALL key：获取哈希表中所有的字段和值。 6.5、列表（List）类型命令 列表的基本操作命令 LPUSH key value1 [value2 ...]：将一个或多个值插入到列表头部。 RPUSH key value1 [value2 ...]：将一个或多个值插入到列表尾部。 LPOP key：移出并获取列表的第一个元素。 RPOP key：移出并获取列表的最后一个元素。 RPOPLPUSH source destination：移出并获取 source 列表的最后一个元素，然后将其添加到 destination 列表的头部。 列表的其他命令 LRANGE key start end：获取列表中指定区间内的元素。 LINDEX key index：获取列表中指定位置的元素。 LLEN key：获取列表的长度。 LREM key count value：根据参数 count 的值，移除列表中与 value 相等的元素。 6.6、集合（Set）类型命令 集合的基本操作命令 SADD key member1 [member2 ...]：将一个或多个成员添加到集合中。 SREM key member1 [member2 ...]：移除集合中的一个或多个成员。 SMEMBERS key：获取集合中的所有成员。 SISMEMBER key member：判断成员是否是集合中的元素。 集合的其他命令 SCARD key：获取集合中元素的数量。 SPOP key [count]：移除并返回集合中的一个或多个随机元素。 SRANDMEMBER key [count]：返回集合中的一个或多个随机元素。 6.7、有序集合（Sorted Set）类型命令 有序集合的基本操作命令 ZADD key score1 member1 [score2 member2 ...]：将成员及其分数添加到有序集合中。 ZREM key member1 [member2 ...]：移除有序集合中的一个或多个成员。 ZSCORE key member：获取有序集合中成员的分数。 ZRANGE key start end [WITHSCORES]：获取有序集合中指定区间内的成员，按照分数从小到大排序。 ZREVRANGE key start end [WITHSCORES]：与 ZRANGE 类似，但成员是按照分数从大到小排序。 有序集合的其他命令 ZCARD key：获取有序集合中元素的数量。 ZCOUNT key min max：计算有序集合中分数在指定区间内的成员数量。 ZINCRBY key increment member：将有序集合中成员的分数增加指定的步长。 6.8、事务相关命令 事务开始和执行命令 MULTI：开始一个事务。 EXEC：执行事务中的所有命令。 事务控制命令 DISCARD：放弃事务中所有的命令操作。 WATCH key1 [key2 ...]：在执行事务之前，监视一个或多个键。 6.9、持久化相关命令 持久化方式控制命令 SAVE：强制 Redis 进行数据持久化操作。 BGSAVE：异步进行数据持久化操作。 持久化状态查询命令 LASTSAVE：返回上次成功持久化操作的时间戳。 ","date":"2025-05-23T10:23:18+08:00","image":"https://Bright9911.github.io/p/redis%E7%9A%84%E4%BD%BF%E7%94%A8/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://Bright9911.github.io/p/redis%E7%9A%84%E4%BD%BF%E7%94%A8/","title":"Redis的使用"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 1 2 3 ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://Bright9911.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu_2307260c751d0e0b.jpg","permalink":"https://Bright9911.github.io/p/test-chinese/","title":"Chinese Test"}]